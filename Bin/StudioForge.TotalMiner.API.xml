<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StudioForge.TotalMiner.API</name>
    </assembly>
    <members>
        <member name="M:StudioForge.TotalMiner.API.ITMPlugin.Initialize(StudioForge.TotalMiner.API.ITMPluginManager,System.String)">
            <summary>
            Initialize the Mod. This method is called by the game when the mod is first activated/loaded.
            </summary>
            <param name="mgr">ITMPluginManager object.</param>
            <param name="path">The path of your Mods folder on disk relative to FileSystem.RootPath. Store and use this path if you require to read/write files from your Mods folder.</param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMPlugin.InitializeGame(StudioForge.TotalMiner.API.ITMGame)">
            <summary>
            This method is called by the game when the player has loaded a world.
            </summary>
            <param name="game">ITMGame object.</param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMPlugin.UnloadMod">
            <summary>
            Called if the mod is unloaded.
            </summary>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMPlugin.HandleInput(StudioForge.TotalMiner.API.ITMPlayer)">
            <summary>
            This method is called by the game once every frame for every local player. Use this method to process user input.
            </summary>
            <param name="player"></param>
            <returns>True if an input was processed.</returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMPlugin.Update">
            <summary>
            This method is called by the game once every frame. Use this method to add frame based logic that is not dependant on a particular player.
            </summary>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMPlugin.Update(StudioForge.TotalMiner.API.ITMPlayer)">
            <summary>
            This method is called by the game once every frame for every local and remote player in the game. Use this method to add player dependant frame based logic.
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMPlugin.Draw(StudioForge.TotalMiner.API.ITMPlayer,StudioForge.TotalMiner.API.ITMPlayer)">
            <summary>
            This method is called by the game once every frame, after all the main rendering has been done. Use this method to add your own rendering.
            </summary>
            <param name="player"></param>
            <param name="virtualPlayer"></param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMPlugin.WorldSaved(System.Int32)">
            <summary>
            This method is called by the game after the world has been saved to disk.
            </summary>
            <param name="version">The version number of the save file.</param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMPlugin.PlayerJoined(StudioForge.TotalMiner.API.ITMPlayer)">
            <summary>
            This method is called once for each player that joins the game.
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMPlugin.PlayerLeft(StudioForge.TotalMiner.API.ITMPlayer)">
            <summary>
            This method is called once for each player that leaves the game.
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMNetworkManager.FindSessions(StudioForge.TotalMiner.SessionMatching)">
            <summary>
            Retrieves a list of network sessions available to join.
            </summary>
            <param name="match">Matchmaking properties.</param>
            <returns>List of network sessions available to join.</returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMNetworkManager.JoinSession(StudioForge.Engine.Net.IAvailableNetworkSession,StudioForge.Engine.GamerServices.Gamer)">
            <summary>
            Called by a client to join an existing network session.
            </summary>
            <param name="session">The available session to join.</param>
            <param name="joiner">The gamer joining the session.</param>
            <returns>A connected network session or null if coould not join.</returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMNetworkManager.CreateSession(StudioForge.Engine.Net.NetworkSessionType,StudioForge.Engine.GamerServices.Gamer,StudioForge.TotalMiner.SessionProperties)">
            <summary>
            Called by the Host Gamer to create a new network session for others to join.
            </summary>
            <param name="type">Type of network session.</param>
            <param name="host">The gamer who is the host of the session (session creator).</param>
            <param name="properties">Properties describing the session.</param>
            <returns>A connected session or null if it could not be created.</returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMNetworkManager.EndSession">
            <summary>
            Called if the Host ends the current network session or the session is disconnected.
            </summary>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMNetworkManager.SendData(StudioForge.Engine.Net.PacketWriter,StudioForge.Engine.Net.SendDataOptions,StudioForge.Engine.Net.NetworkGamer)">
            <summary>
            Send a packet to a remote gamer. If recipient is null, send the packet to all remote gamers.
            </summary>
            <param name="data">Packet to send.</param>
            <param name="options">Send options.</param>
            <param name="recipient">Gamer to receive the packet. If null all remote gamers in the session receive the packet.</param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMNetworkManager.ReadData(StudioForge.Engine.Net.PacketReader,StudioForge.Engine.Net.NetworkGamer@)">
            <summary>
            Fill a PacketReader with packet data intended for the local gamer.
            </summary>
            <param name="data">The PacketReader stream to be filled with the packet data intended for the local gamer.</param>
            <param name="sender">The gamer who sent the packet.</param>
            <returns>True if there is still packets to read (from other senders). False if no more packets to read.</returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMNetworkManager.ParseCustomPacket(StudioForge.Engine.Net.PacketReader,StudioForge.Engine.Net.NetworkGamer)">
            <summary>
            Allows Mods to read and parse custom packets.
            </summary>
            <param name="data"></param>
            <param name="sender">The gamer who sent the packet.</param>
            <returns>Returns True if the packet was processed, false if not (a different mods packet).</returns>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMNetworkManager.Session">
            <summary>
            Returns the current Network Session or null if no session connected.
            </summary>
        </member>
        <member name="M:StudioForge.TotalMiner.Sounds.Initialize(StudioForge.TotalMiner.API.ITMGame)">
            <summary>
            Implementation detail. Consumers should not call.
            </summary>
            <param name="game">Game Instance</param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMEntityManager.AddEntity(System.String,System.String,StudioForge.TotalMiner.Entity)">
            <summary>
            Add an Entity to the world.
            </summary>
            <param name="comPack">The name of the Component Pack the the entities model component resides in.</param>
            <param name="comName">The name of the component used as the entities model.</param>
            <param name="entity">An entity object.</param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMEntityManager.RemoveEntity(StudioForge.TotalMiner.Entity)">
            <summary>
            Remove an Entity from the world.
            </summary>
            <param name="entity">The entity to remove.</param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMWorld.GetBlockBox(StudioForge.BlockWorld.GlobalPoint3D,StudioForge.TotalMiner.Block)">
            <summary>
            Returns a bounding box that correctly surrounds the block at a given position, and is suitable for collision detection.
            </summary>
            <param name="p">The position of the block.</param>
            <param name="blockID">The blockID at position p.</param>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMWorld.AddParticle(Microsoft.Xna.Framework.Vector3,StudioForge.TotalMiner.Graphics.ParticleData@)">
            <summary>
            Spawn a new particle into the game world.
            </summary>
            <param name="pos">World start position of the particle (center).</param>
            <param name="data">Data describing the particle.</param>
            <returns>Returns true if the particle was spawned successfully.</returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMWorld.AddProjectile(StudioForge.TotalMiner.Item,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,StudioForge.TotalMiner.API.ITMPlayer,System.Boolean)">
            <summary>
            Adds a projectile textured for the itemID.
            </summary>
            <param name="itemID">The item of the projectile.</param>
            <param name="position">The origin position of the projectile.</param>
            <param name="velocity">The start velocity of the projectile. The projectile is affected by the world gravity.</param>
            <param name="player">The player who created the projectile.</param>
            <param name="transmit">True if the projectile should be created on remote clients.</param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMWorld.AddMapMarker(StudioForge.BlockWorld.GlobalPoint3D,System.String,StudioForge.TotalMiner.MapMarkerType,System.Boolean)">
            <summary>
            Add a Marker to the world overview map.
            </summary>
            <param name="p">The map position for the marker. Y is ignored.</param>
            <param name="text">The marker text or label.</param>
            <param name="type">The type of marker.</param>
            <param name="transmit">True if remotes should also add the marker.</param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMWorld.RayBlockTest(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Casts a ray test for block collision detection.
            </summary>
            <param name="position">The origin position of the ray.</param>
            <param name="dir">The direction of the ray.</param>
            <param name="range">The range (distance in meters) of the ray. For performance considerations it is best to limit the range to the shortest necessary.</param>
            <returns>The result of the test.</returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMWorld.IsBlockDeliveringPower(StudioForge.BlockWorld.GlobalPoint3D)">
            <summary>
            Returns true if a block position is currently delivering power.
            </summary>
            <param name="p">Block position</param>
            <returns>Returns true if a block position is currently delivering power.</returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMWorld.IsBlockReceivingPower(StudioForge.BlockWorld.GlobalPoint3D)">
            <summary>
            Returns true if a block position is currently receiving power.
            </summary>
            <param name="p">Block position</param>
            <returns>Returns true if a block position is currently receiving power.</returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMWorld.SetPower(StudioForge.BlockWorld.GlobalPoint3D,System.Boolean,StudioForge.TotalMiner.API.ITMPlayer)">
            <summary>
            Set power on or off for a block at a position in the map. Any powered mechanism block at that position will react. Setting power on for a block that is already powered has no effect, likewise setting power off for a block that is not powered has no effect.
            </summary>
            <param name="p">Map position.</param>
            <param name="power">True (on) or False (off).</param>
            <param name="player">The player who powered the block or -1 if no player.</param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMWorld.GetClosestListener(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Returns the AudioListener object of the closest local player to a (sound source) position.
            </summary>
            <param name="position">The source position of the sound.</param>
            <returns>The AudioListener object of the closest local player, or null.</returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMWorld.BroadcastSound(Microsoft.Xna.Framework.Vector3,StudioForge.TotalMiner.API.ITMActor,StudioForge.TotalMiner.SoundType)">
            <summary>
            Instruct the game to broadcast a sound emission to other actors.
            </summary>
            <param name="origin">The origin position of the sound emission.</param>
            <param name="actor">The actor who emitted the sound.</param>
            <param name="soundType">The type of sound emitted.</param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMWorld.IsAnyLocalPlayerInProximity(Microsoft.Xna.Framework.Vector3,System.Single,System.Boolean)">
            <summary>
            Returns true if any local player is within a proximity
            </summary>
            <param name="pos">World position of proximity center.</param>
            <param name="range">Proximity radius.</param>
            <param name="eye">True = Test players Eye position. False = Test players Foot position.</param>
            <returns>True if at least one local player is within proximity.</returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMWorld.CreateBlast(StudioForge.BlockWorld.GlobalPoint3D,StudioForge.TotalMiner.Item,System.Single,System.Int32,StudioForge.TotalMiner.API.ITMPlayer)">
            <summary>
            Create a blast explosion
            </summary>
            <param name="p">World Tile position at blast center.</param>
            <param name="itemID">Item that created the blast.</param>
            <param name="strength">Blast strength.</param>
            <param name="radius">Blast radius.</param>
            <param name="player">Player that created the blast or -1 if no player.</param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMWorld.CreateFallingBlock(StudioForge.BlockWorld.GlobalPoint3D,StudioForge.TotalMiner.API.ITMPlayer,StudioForge.BlockWorld.UpdateBlockMethod,System.Boolean)">
            <summary>
            Causes a block to start falling until it hits another block.
            </summary>
            <param name="p">World Tile position of source block.</param>
            <param name="player">Player who caused the block to fall or -1 if no player.</param>
            <param name="method">Update method.</param>
            <param name="transmit">True = Transmit over the network to remote players. False = Local operation only.</param>
            <returns></returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMWorld.FloodPhysics(StudioForge.BlockWorld.GlobalPoint3D,StudioForge.TotalMiner.Block,StudioForge.TotalMiner.API.ITMPlayer,System.Boolean)">
            <summary>
            Creates a flood.
            </summary>
            <param name="p">Flood source position.</param>
            <param name="blockID">Block to flood with.</param>
            <param name="player">Player who created the flood or -1 if no player.</param>
            <param name="transmit">True = Transmit flood over network to remote players. False = Local operation only.</param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMWorld.TeleportEntities(StudioForge.BlockWorld.GlobalPoint3D,StudioForge.BlockWorld.GlobalPoint3D,StudioForge.BlockWorld.GlobalPoint3D,System.Boolean)">
            <summary>
            Teleport all entities in an area to another position.
            </summary>
            <param name="min">The minimum Tile position of the area.</param>
            <param name="max">The maximum Tile position of the area. Using both min and max, a cubic area is defined.</param>
            <param name="dest">The destination Tile position to teleport the entities to.</param>
            <param name="relative">False = all entities are teleported directly to tile position 'dest' regardless of their position in the area. True = all entities are teleported to a tile position relative to 'dest' and their original position relative to 'min'. e.g. final position = dest + (entity position - min)</param>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMWorld.IsCreativeMode">
            <summary>
            Returns True if this is a Creative Mode world.
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMWorld.IsSurvivalMode">
            <summary>
             Returns True if this is a Survival Mode world.
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMWorld.IsPeacefulMode">
            <summary>
            Returns True if this is a Peaceful Mode world.
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMWorld.IsDigDeepMode">
            <summary>
            Returns True if this is a Dig Deep Mode world.
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMWorld.IsFiniteResources">
            <summary>
            Returns True if Finite Resources is enabled.
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMWorld.IsSkillsEnabled">
            <summary>
            Returns True if Local or Global Skills are enabled.
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMWorld.IsLocalSkillsEnabled">
            <summary>
            Returns True if Local Skills are enabled.
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMWorld.IsLocalSkills">
            <summary>
            Returns True if this is a Local Skills world.
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMWorld.IsPeacefulDifficulty">
            <summary>
            Returns True if Peaceful Difficulty is enabled.
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMWorld.IsEasyDifficulty">
            <summary>
            Returns True if Easy Difficulty is enabled.
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMWorld.IsNormalDifficulty">
            <summary>
            Returns True if Normal Difficulty is enabled.
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMWorld.IsLegendaryDifficulty">
            <summary>
            Returns True if Legendary Difficulty is enabled.
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMWorld.Map">
            <summary>
            Returns a reference to the Map object.
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMWorld.Header">
            <summary>
            Returns header data about the current world. This property returns a clone so that if you change a field on the object it does not effect the actual world header. For this reason it is best to cache this object and only call this getter again if it is critical to have any changes that might have been made since the last time you called the getter (such as a map rename).
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMWorld.CurrentBiome">
            <summary>
            Returns the worlds current Biome.
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMWorld.Zones">
            <summary>
             Returns a List of all Zones in the world.
            </summary>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMGame.AddNotification(System.String)">
            <summary>
            Adds a new 'pink' notification to the top left of the screen.
            </summary>
            <param name="message">The local notification message text.</param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMGame.AddNotification(System.String,StudioForge.TotalMiner.NotifyRecipient)">
            <summary>
            Adds a new 'pink' notification to the top left of the screen.
            </summary>
            <param name="message">The notification message text.</param>
            <param name="recType">Who receives the notification.</param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMGame.AddEventBlockMined(StudioForge.TotalMiner.Block,System.Action{StudioForge.TotalMiner.Block,System.Byte,StudioForge.BlockWorld.GlobalPoint3D,StudioForge.TotalMiner.API.ITMHand})">
            <summary>
            Adds an Action method that will be executed when a block is mined.
            </summary>
            <param name="blockID">The block that was mined or Block.None for all blocks.</param>
            <param name="action">The method to execute. Block=The block that was mined. Byte=Aux data of the block before it was mined. GlobalPoint3D=Block position. ITMHand=The hand that mined the block. From the hand you can get the owner/player.</param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMGame.AddEventBlockPlaced(StudioForge.TotalMiner.Block,System.Action{StudioForge.TotalMiner.Block,StudioForge.BlockWorld.GlobalPoint3D,StudioForge.TotalMiner.API.ITMHand})">
            <summary>
            Adds an Action method that will be executed when the block is placed.
            </summary>
            <param name="blockID">The block that was placed or Block.None for all blocks.</param>
            <param name="action">The method to execute. Block=The block that was placed. GlobalPoint3D=Block position. ITMHand=The hand that placed the block. From the hand you can get the owner/player.</param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMGame.AddEventItemSwing(StudioForge.TotalMiner.Item,System.Action{StudioForge.TotalMiner.Item,StudioForge.TotalMiner.API.ITMHand})">
            <summary>
            Adds an Action method that will be executed when the item is swung and the swing has reached it's extended position.
            </summary>
            <param name="itemID">The item being swung or Item.None for all items.</param>
            <param name="action">The method to execute. Item=The item swung. ITMHand=The hand that swung the item.</param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMGame.AddItemCustomSetup(StudioForge.TotalMiner.Item,StudioForge.TotalMiner.Permissions)">
            <summary>
            Flags an item has having a custom setup screen (from the prospect/interact screen). When a player presses A for Setup on the Interact screen, your ITMPluginGUI object is called for a new instance of the setup screen.
            </summary>
            <param name="itemID">The Item that has a custom setup screen. This includes Blocks.</param>
            <param name="permission">The permissions the player must have to open the screen.</param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMGame.AddConsoleCommand(System.Action{System.String,StudioForge.TotalMiner.API.ITMGame,StudioForge.TotalMiner.API.ITMPlayer,StudioForge.TotalMiner.API.ITMPlayer,StudioForge.Engine.Integration.IOutputLog},System.String,System.String,System.String)">
            <summary>
            Add a command to the game console window.
            </summary>
            <param name="action">The method to execute the command.</param>
            <param name="cmd">The command (text).</param>
            <param name="briefHelp">Brief help message, usually one line long, listing any parameters. Displayed by the 'help' command.</param>
            <param name="fullHelp">A full help message, describing the command and each parameter on a separate line. Displayed by the 'help [command]' command.</param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMGame.RunConsoleCommand(System.String,StudioForge.TotalMiner.API.ITMPlayer,StudioForge.TotalMiner.API.ITMPlayer,StudioForge.Engine.Integration.IOutputLog)">
            <summary>
            Run a raw unparsed console command.
            </summary>
            <param name="command">Raw unparsed command text.</param>
            <param name="caller">The player who executed the command.</param>
            <param name="player">Target player.</param>
            <param name="log">Output log.</param>
            <returns>True if the command was executed.</returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMGame.RunScript(System.String,StudioForge.TotalMiner.API.ITMActor)">
            <summary>
            Run an existing script.
            </summary>
            <param name="script">Name of script, including full path.</param>
            <param name="actor">Actor the script is executed for.</param>
            <returns>True if the script was found.</returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMGame.RunSingleScriptCommand(System.String,StudioForge.TotalMiner.API.ITMActor)">
            <summary>
            Run a single script command.
            </summary>
            <param name="command">Full script command text, unparsed.</param>
            <param name="actor">Actor the script command is executed for.</param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMGame.SendTextMessage(System.String,StudioForge.TotalMiner.API.ITMPlayer,StudioForge.TotalMiner.API.ITMPlayer,System.Boolean,System.Boolean)">
            <summary>
            Send a text message.
            </summary>
            <param name="message">The message text.</param>
            <param name="sender">The player who sent the message.</param>
            <param name="recipient">The recipient. Pass null to send to all players.</param>
            <param name="clan">True if the message is to be sent to all members of recipients clan.</param>
            <param name="admins">True if the message is to be sent to all admins (recipient and clan are ignored).</param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMGame.RemoveEventBlockMined(StudioForge.TotalMiner.Block,System.Action{StudioForge.TotalMiner.Block,System.Byte,StudioForge.BlockWorld.GlobalPoint3D,StudioForge.TotalMiner.API.ITMHand})">
            <summary>
            Removes an block mined event that was previously added with AddEventBlockMined(..).
            </summary>
            <param name="blockID">The block that was mined.</param>
            <param name="action">The method to execute.</param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMGame.RemoveEventBlockPlaced(StudioForge.TotalMiner.Block,System.Action{StudioForge.TotalMiner.Block,StudioForge.BlockWorld.GlobalPoint3D,StudioForge.TotalMiner.API.ITMHand})">
            <summary>
            Removes an block placed event that was previously added with AddEventBlockPlaced(..).
            </summary>
            <param name="blockID">The block that was placed.</param>
            <param name="action">The method to execute.</param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMGame.RemoveEventItemSwing(StudioForge.TotalMiner.Item,System.Action{StudioForge.TotalMiner.Item,StudioForge.TotalMiner.API.ITMHand})">
            <summary>
            Removes an item swing event that was previously added with AddEventItemSwing(..).
            </summary>
            <param name="itemID">The item being swung.</param>
            <param name="action">The method to execute.</param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMGame.OpenPauseMenu(StudioForge.TotalMiner.API.NewGuiMenu,StudioForge.TotalMiner.API.ITMPlayer)">
            <summary>
            Opens the Pause menu with your custom menu pre-selected
            </summary>
            <param name="menu">A custom menu</param>
            <param name="player">The player who opened the screen</param>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMGame.Random">
            <summary>
            A general random number generator that can be used anywhere.
            </summary>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMInventory.ItemCount(StudioForge.TotalMiner.Item)">
            <summary>
            Query how many of a certain item are in (pack) inventory.
            </summary>
            <param name="itemID">The item to count</param>
            <returns></returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMInventory.Clear">
            <summary>
            Clear all items from inventory.
            </summary>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMInventory.AddToInventory(StudioForge.TotalMiner.Item)">
            <summary>
            Add an item to inventory pack.
            </summary>
            <param name="itemID">The item to add.</param>
            <returns>The quantity added.</returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMInventory.AddToInventory(StudioForge.TotalMiner.Item,System.Int32)">
            <summary>
            Add an item to inventory pack.
            </summary>
            <param name="itemID">The item to add.</param>
            <param name="count">The quantity to add.</param>
            <returns>The quantity added.</returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMInventory.AddToInventory(StudioForge.TotalMiner.InventoryItem)">
            <summary>
            Add an item to inventory pack.
            </summary>
            <param name="item">The item to add.</param>
            <returns>The quantity added.</returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMInventory.DecrementItem(StudioForge.TotalMiner.Item,System.Int32)">
            <summary>
            Decrement an items count. If the item count reaches zero, it is also correctly removed from the players hand, hotbar etc.
            </summary>
            <param name="itemID">The item to decrement.</param>
            <param name="qty">The quantity to decrement.</param>
            <returns>The quantity remaining, i.e. qty - actual.</returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMInventory.FindItem(StudioForge.TotalMiner.Item)">
            <summary>
            Find an item in pack inventory.
            </summary>
            <param name="itemID">The item to find.</param>
            <returns>The slot ID of the item or -1 if not found.</returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMInventory.FindItem(StudioForge.TotalMiner.Item,System.Boolean)">
            <summary>
            Find an item in pack inventory.
            </summary>
            <param name="itemID">The item to find.</param>
            <param name="mustBeUnequipped">True if the item must be equipped.</param>
            <returns>The slot ID of the item or -1 if not found.</returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMInventory.FindItem(System.Int32,System.Int32,StudioForge.TotalMiner.Item,System.Boolean)">
            <summary>
            Find an item in a region of inventory.
            </summary>
            <param name="fromSlotID">Slot ID to start search.</param>
            <param name="toSlotID">Slot ID to end search.</param>
            <param name="itemID">The item to Find.</param>
            <param name="mustBeUnequipped">True if the item must be equipped.</param>
            <returns>The slot ID of the item or -1 if not found.</returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMInventory.FindItem(StudioForge.TotalMiner.Item,System.Int32,System.UInt16)">
            <summary>
            Find an item in pack inventory.
            </summary>
            <param name="itemID">The item to find.</param>
            <param name="count">The count the inventory item must have exactly.</param>
            <param name="durability">The durability the inventory item must have exactly.</param>
            <returns>The slot ID of the item or -1 if not found.</returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMInventory.FindItem(StudioForge.TotalMiner.ItemType)">
            <summary>
            Find an item of a specific type in pack inventory.
            </summary>
            <param name="itemType">The type of item to find.</param>
            <returns>The slot ID of the item or -1 if not found.</returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMInventory.FindItem(StudioForge.TotalMiner.ItemSubType)">
            <summary>
            Find an item of a specific subtype in pack inventory.
            </summary>
            <param name="itemSubType">The subtype of item to find.</param>
            <returns>The slot ID of the item or -1 if not found.</returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMInventory.FindItemHighestValue(StudioForge.TotalMiner.ItemType)">
            <summary>
            Find the highest valued item of a specific type in pack inventory. 
            </summary>
            <param name="itemType">The type of item to find.</param>
            <returns>The slot ID of the item or -1 if not found.</returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMInventory.FindItemHighestValue(StudioForge.TotalMiner.ItemSubType)">
            <summary>
            Find the highest value item of a specific subtype in pack inventory.
            </summary>
            <param name="itemSubType">The subtype of item to find.</param>
            <returns>The slot ID of the item or -1 if not found.</returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMInventory.ReadState(System.IO.BinaryReader,System.Int32)">
            <summary>
            Deserialize the Inventory object from a binary stream.
            </summary>
            <param name="reader">BinaryReader.</param>
            <param name="version">The version number of the serialized data.</param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMInventory.WriteState(System.IO.BinaryWriter)">
            <summary>
            Serialize the Inventory object to a binary stream.
            </summary>
            <param name="writer">BinaryWriter.</param>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMInventory.PackSize">
            <summary>
            The number of slots in the pack inventory.
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMInventory.EquipSize">
            <summary>
            The number of slots in the equip (body) inventory.
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMInventory.TempSize">
            <summary>
            The number of slots in the temp (crafting) inventory.
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMInventory.TotalSize">
            <summary>
            The total number of inventory slots (pack + equip + temp).
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMInventory.EquipIndexStart">
            <summary>
            The start slot ID for equip inventory.
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMInventory.EquipIndexEnd">
            <summary>
            The end slot ID for equip inventory.
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMInventory.TempIndexStart">
            <summary>
            The start slot ID for temp inventory.
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMInventory.TempIndexEnd">
            <summary>
            The end slot ID for temp inventory.
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMInventory.Items">
            <summary>
            The raw list of inventory items. Includes all pack, equip and temp items. It is best not to add/remove items from this list directly.
            </summary>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMHand.SetItem(StudioForge.TotalMiner.Item)">
            <summary>
            Directly set the item equipped by the hand.
            </summary>
            <param name="itemID"></param>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMHand.Owner">
            <summary>
            The entity which the hand belongs to. Maybe a Player or NPC.
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMHand.Player">
            <summary>
            The player the hand belongs too. If the hand belongs to an NPC, this propery will be null. It is always necessary to check if this property is null before using it as a reference.
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMHand.ItemID">
            <summary>
            The item currently equiped in the hand.
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMHand.HandIndex">
            <summary>
            The inventory slot ID of the item currently equipped by the hand.
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMHand.HandType">
            <summary>
            The hand type.
            </summary>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMHand.IsSwinging">
            <summary>
            True if the hand is currently swinging.
            </summary>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMNpcManager.GetNpcs(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,StudioForge.TotalMiner.ActorType,System.Collections.Generic.List{StudioForge.TotalMiner.API.ITMActor})">
            <summary>
            Fills a provided list with all NPCs inside a specified region.
            If you are calling this method often, then cache the list to avoid garbage issues.
            </summary>
            <param name="min">The min bound of the region.</param>
            <param name="max">The max bound of the region.</param>
            <param name="actorType">The type of NPC. Pass ActorType.None to test all NPCs.</param>
            <param name="result">A valid list you must provide to the method. This list will be filled with NPCs that match the type and are found inside the region.</param>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMNpcManager.SpawnNpc(StudioForge.TotalMiner.ActorType,Microsoft.Xna.Framework.Vector3,System.String,StudioForge.TotalMiner.DayOrNight,System.String,StudioForge.TotalMiner.LootTable,System.Nullable{StudioForge.TotalMiner.CombatStats})">
            <summary>
            Spawn an NPC.
            </summary>
            <param name="actorType">The type of NPC.</param>
            <param name="pos">The absolute position of the NPC (center, feet).</param>
            <param name="ai">The name of the behaviour tree for the NPC behaviour. null = use default.</param>
            <param name="dayOrNight"></param>
            <param name="killScript">The name of the script to be executed if the NPC is killed. null = no script.</param>
            <param name="lootTable">A custom loot table for the NPC. null = use default.</param>
            <param name="combatStats">Custom combat stats for the NPC. null = use default.</param>
            <returns></returns>
        </member>
        <member name="M:StudioForge.TotalMiner.API.ITMNpcManager.DeactivateNpc(StudioForge.TotalMiner.API.ITMActor)">
            <summary>
            Deactivate an NPC.
            </summary>
            <param name="npc">The NPC to deactivate.</param>
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMNpcManager.NpcList">
            <summary>
            A readonly list of all NPCs. Do not alter the contents of the list. This list is not thread safe.
            Test npc.IsDeadOrInactiveOrDisabled before use if you are only interested in active/alive NPCs.
            </summary>     
        </member>
        <member name="P:StudioForge.TotalMiner.API.ITMNpcManager.HasFreeNpcSlots">
            <summary>
            Returns False if no more NPCs can be spawned (all slots are allocated).
            </summary>
        </member>
    </members>
</doc>
